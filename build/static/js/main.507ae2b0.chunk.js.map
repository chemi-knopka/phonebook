{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notify.js","services/persons.js","App.js","index.js"],"names":["Filter","nameFilter","handleNewFilter","value","onChange","PersonForm","props","onSubmit","addNewName","newName","handleNewName","newPhone","handleNewPhone","type","Persons","person","deletePerson","name","number","onClick","Notify","message","isError","tagName","className","baseUrl","personObj","axios","post","then","response","data","get","id","delete","put","App","useState","persons","setPersons","setNewName","setNewPhone","setNameFilter","errorMessage","setErrorMessage","setIsError","useEffect","personServices","res","filterPeople","filter","toLowerCase","includes","udpatePerson","newPersonInfo","personToUpdate","find","returnedPerson","map","makeNotification","catch","error","setTimeout","e","target","preventDefault","some","window","confirm","console","log","concat","deletedPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.507ae2b0.chunk.js","sourcesContent":["const Filter = ({nameFilter, handleNewFilter}) => {\n    return (\n        <div>\n          <strong>enter person's name to filter:</strong>\n          <input \n              value={nameFilter}\n              onChange={handleNewFilter}\n          />\n        </div>\n    )\n    \n}\n\nexport default Filter","const PersonForm = (props) => {\n    return (\n        <form onSubmit={props.addNewName}>\n        <h2>add new </h2>\n        <div>\n          name :  \n          <input \n              value={props.newName}\n              onChange={props.handleNewName}\n          />\n        </div>\n        <div>\n          phone:\n          <input\n              value={props.newPhone}\n              onChange={props.handleNewPhone}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm","const Persons = ({person, deletePerson}) => {\n    return (\n        <div>\n            <strong>{person.name}:</strong> {person.number}\n            <button onClick={deletePerson}> delete</button>\n        </div>    \n    )\n}\n\nexport default Persons\n\n","const Notify = ({message, isError}) => {\n    if (message === null){\n        return null;\n    }\n    \n    const tagName = isError ? \"error\" : 'notification'\n\n    return (\n        <div className={tagName}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notify","import axios from 'axios'\nconst baseUrl = \"/api/persons\"\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(response => response.data);\n}\n\nconst create = (personObj) => {\n    const request = axios.post(baseUrl, personObj);\n    return request.then(response => response.data);\n}\n\nconst deleteOne = (id) => {\n    return axios.delete(`${baseUrl}/${id}`);\n}\n\nconst update = (id, personObj) => {\n    const request = axios.put(`${baseUrl}/${id}`, personObj);\n    return request.then(response => response.data);\n}\n\nexport default { create, getAll, deleteOne, update }","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notify from './components/Notify'\nimport personServices from './services/persons'\n\nimport './index.css'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ nameFilter, setNameFilter] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState(null)\n  const [ isError, setIsError] = useState(false)\n\n  // handle filter input field\n  const handleNewFilter = (e) => \n          setNameFilter(e.target.value)\n  \n  // handle input from name field\n  const handleNewName = (e) => \n          setNewName(e.target.value)\n\n  // handle input from phone input field  \n  const handleNewPhone = (e) => \n          setNewPhone(e.target.value);\n\n\n  // fetch persons data from db.js server\n  useEffect(() => {\n    //console.log(\"effect\");\n    personServices\n      .getAll()\n      .then(res => {\n        //console.log(\"fetched\");\n        setPersons(res)\n      })\n  }, [])\n\n  // filter people by entered filter word \n  const filterPeople = \n        persons.filter( person => \n            person\n              .name\n              .toLowerCase()\n              .includes(nameFilter.toLowerCase())\n              )\n\n  // add new contact in phone book\n  const addNewName = (e) => {\n    // prevent from page refresh\n    e.preventDefault();\n\n    // create new Contact object\n    const newPersonInfo = {\n      name: newName,\n      number: newPhone\n    }\n\n    // handle update phoneBook based on condition\n    if (persons.some(e => e.name === newName)){\n      // check if phone already exist in phone book\n      const update = window.confirm(`person '${newName}' already exists in the phonebook, \n                                          \\nDo you really want to update its number?`)\n\n      // if user clicks \"OK\" button, peeson's phone number will be updated\n      if (update){\n        udpatePerson(newPersonInfo);\n      } else {\n        console.log(\"request on update was rejected\");\n      }\n\n    } else {\n      // if not exist entered phone add it\n       \n      personServices\n        .create(newPersonInfo)\n        .then(res => {\n          //console.log(\"adding name...\", res.name);\n          setPersons(persons.concat(res));\n          setNewName('') // clear name field\n          setNewPhone('') // clear phoen field\n          // before notification make sure to set error indicator to false\n          setIsError(false);\n          // make notification\n          makeNotification(`added '${res.name}'`);\n        })\n        .catch (error => {\n          console.log(error.response.data)\n          // before notification make sure to set error indicator to 'true'\n          setIsError(true);\n          // make notification\n          makeNotification(`failed to add person '${newName}'`)\n        } )\n    }\n  }\n\n  // this function is called if user will confirm update allert \n  // it will udpate phone number of the person\n  const udpatePerson = (newPersonInfo) => {\n        // find person to update\n        const personToUpdate = persons.find(person => person.name === newPersonInfo.name);\n\n        // update\n        personServices\n          .update(personToUpdate.id, newPersonInfo)\n          .then(returnedPerson => {\n            setPersons(persons.map(person =>\n                    person.name !== newPersonInfo.name\n                    ? person \n                    : returnedPerson\n           ));\n          // before notification make sure to set error indicator to false\n          setIsError(false);\n          // make notification\n           makeNotification(`updated '${returnedPerson.name}'` )\n          })\n          .catch(error => {\n            // filter persons on the display to remove deleted person from the display\n            setPersons(persons.filter(person => person.id !== personToUpdate.id))\n            // before notification make sure to set error indicator to 'true'\n            setIsError(true);\n            // make notification\n            makeNotification(`can't update person '${personToUpdate.name}',it is deleted`)    \n          })\n  }\n\n  // delete person from the list\n  const deletePerson = (id) => {\n    const deletedPerson = persons.find(person => person.id === id)\n    personServices\n      .deleteOne(id)\n      .then(res =>{\n          // after deletion this will remove person from display   \n          setPersons(persons.filter(person => person.id !== id))\n          // before notification make sure to set error indicator to false\n          setIsError(false);\n          // make notification\n          makeNotification(`deleted '${deletedPerson.name}'`)\n      })\n      .catch(error => {\n        // filter persons on the display to remove deleted person from the display\n        setPersons(persons.filter(person => person.id !== id))\n         // before notification make sure to set error indicator to 'true'\n         setIsError(true);\n         // make notification\n        makeNotification(`person '${deletedPerson.name}' is already deleted`)\n      })\n    \n  }\n\n  // create notification about succesful operation\n  const makeNotification = (message) => {\n    setErrorMessage(\n      `${message}`\n    )\n    // after some time message disappears\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 3000\n    )\n  }\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Notify \n          message={errorMessage}\n          isError={isError}\n          /> \n      <Filter \n          nameFilter={nameFilter}\n          handleNewFilter={handleNewFilter} \n          />\n      <PersonForm \n          addNewName={addNewName}\n          newName={newName}\n          handleNewName={handleNewName}\n          newPhone={newPhone}\n          handleNewPhone={handleNewPhone}\n          />\n      {/** iterate through persons list and display them */}\n      <h2>List</h2>\n      <div>\n      {\n        filterPeople.map(person => {\n          return (\n            <Persons \n                key={person.number}\n                person={person}\n                deletePerson={() => deletePerson(person.id)}\n                /> \n          )\n        })\n      }\n      </div>\n    </>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}